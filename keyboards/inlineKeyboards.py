from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import math
from datetime import datetime
import calendar
from pytz import timezone
from data.DirectionRoutesPoints import *
from func import *

supportkb = InlineKeyboardMarkup(row_width=1)
url_tg = InlineKeyboardButton('@baze1evs', url='https://t.me/Baze1evs')
supportkb.add(url_tg)

becomekb=InlineKeyboardMarkup(row_width=1)
url_form_driver=InlineKeyboardButton("–§–æ—Ä–º–∞",url='https://www.youtube.com/watch?v=HIcSWuKMwOw')
becomekb.add(url_form_driver)


def GenerationOfInlineButtons(data, title, rows=3, columns=6, page_number=0):
    """
    Generates a keyboard with inline buttons for use in Telegram Inline mode.

    Parameters:
    - data: list of data for the buttons.
    - title: the title of the keyboard.
    - rows: number of rows of buttons in the keyboard. Default is 3.
    - columns: number of columns of buttons in the keyboard. Default is 6.
    - page_number: the page number of the keyboard to display. Default is 0.

    Returns:
    Returns a list containing an InlineKeyboardMarkup object and the current page number.

    If the page number is out of range or equal to the number of pages, the function returns -2.

    Example usage:
    buttons = GenerationOfInlineButtons(data=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], title="Example Keyboard")
    keyboard = buttons[0]
    page_number = buttons[1]
    """

    prev_button = InlineKeyboardButton("‚óÄÔ∏è", callback_data="prev")
    next_button = InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="next")
    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    title_button = InlineKeyboardButton(f"{title}", callback_data="title")
    empty_button1 = InlineKeyboardButton("", callback_data="empty_button1")
    empty_button2 = InlineKeyboardButton("", callback_data="empty_button2")
    empty_button3 = InlineKeyboardButton("", callback_data="empty_button3")

    keyboards = InlineKeyboardMarkup(row_width=3)

    lenData = len(data)
    numberOfCells = rows * columns
    numberOfPages = math.ceil(lenData / numberOfCells)
    numberFirstElement = numberOfCells*page_number

    if page_number == numberOfPages or page_number < 0:
        return -2
    keyboards.add(title_button)
    keyboards.row(empty_button1, empty_button2, empty_button3)

    for i in range(numberFirstElement, numberFirstElement + numberOfCells):
        if i >= lenData:
            break
        button = InlineKeyboardButton(text=f"{data[i]}", callback_data=f"{data[i]}")
        keyboards.insert(button)
    keyboards.row(prev_button, cancel_button, next_button)

    return [keyboards, page_number]




class Colors:
    """
    A class representing a collection of colors with corresponding smiley icons as a Telegram inline keyboard.

    Attributes:
    - colors_smile: a dictionary mapping color names with their corresponding smiley icons.
    - buttons: a list of inline keyboard buttons generated from the colors_smile dictionary.
    - title_button: an inline keyboard button for the title of the keyboard.
    - empty_button1, empty_button2, empty_button3: empty inline keyboard buttons for layout purposes.
    - inline_keyboard_colors: an InlineKeyboardMarkup object containing the generated keyboard.

    Example usage:
    my_colors = Colors()
    keyboard = my_colors.inline_keyboard_colors
    """

    def __init__(self):
        self.colors_smile = {
            "–ö—Ä–∞—Å–Ω—ã–π üî¥": "–ö—Ä–∞—Å–Ω—ã–π",
            "–û—Ä–∞–Ω–∂–µ–≤—ã–π üü†": "–û—Ä–∞–Ω–∂–µ–≤—ã–π",
            "–ñ—ë–ª—Ç—ã–π üü°": "–ñ—ë–ª—Ç—ã–π",
            "–ó–µ–ª–µ–Ω—ã–π üü¢": "–ó–µ–ª–µ–Ω—ã–π",
            "–ì–æ–ª—É–±–æ–π üåä": "–ì–æ–ª—É–±–æ–π",
            "–°–∏–Ω–∏–π üîµ": "–°–∏–Ω–∏–π",
            "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π üíú": "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π",
            "–†–æ–∑–æ–≤—ã–π üå∏": "–†–æ–∑–æ–≤—ã–π",
            "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π üü§": "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π",
            "–°–µ—Ä—ã–π üå´Ô∏è": "–°–µ—Ä—ã–π",
            "–ë–µ–ª—ã–π ‚ö™Ô∏è": "–ë–µ–ª—ã–π",
            "–ß—ë—Ä–Ω—ã–π ‚ö´Ô∏è": "–ß–µ—Ä–Ω—ã–π"
        }

        self.empty_button1 = InlineKeyboardButton("", callback_data="empty_button1")
        self.empty_button2 = InlineKeyboardButton("", callback_data="empty_button2")
        self.empty_button3 = InlineKeyboardButton("", callback_data="empty_button3")

        self.buttons = [
            InlineKeyboardButton(text=color, callback_data=self.colors_smile[color]) for color in self.colors_smile
        ]

        self.title_button = InlineKeyboardButton("–¶–≤–µ—Ç–∞", callback_data="title")
        self.inline_keyboard_colors = InlineKeyboardMarkup(row_width=3).add(self.title_button)
        self.inline_keyboard_colors.row(self.empty_button1, self.empty_button2, self.empty_button3)
        self.inline_keyboard_colors.add(*self.buttons)




def GenerationOfInlineButtons_calendar(page_number=-2, year=-2, counter=0, limiter=True):

    moscow_tz = timezone('Europe/Moscow')
    current_date = datetime.now(moscow_tz)
    if year == -2:
            year = current_date.year
    if page_number == -2:
        page_number = current_date.month
    elif page_number < 1:
        page_number = 12
        year -= 1
    elif page_number > 12:
        page_number = 1
        year += 1

    result: list = [year, page_number]# —É–ø–æ–∫–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
    current_month = month_names[page_number - 1]
    if limiter == True:
        limiter = 11 - current_date.month
        if year == 2023:
            limiter += 12

    if counter > limiter + 1 or counter < 0:
        return -2




    days_in_month = {
        "–Ø–Ω–≤–∞—Ä—å": range(1, 32),
        "–§–µ–≤—Ä–∞–ª—å": range(1, 30),
        "–ú–∞—Ä—Ç": range(1, 32),
        "–ê–ø—Ä–µ–ª—å": range(1, 31),
        "–ú–∞–π": range(1, 32),
        "–ò—é–Ω—å": range(1, 31),
        "–ò—é–ª—å": range(1, 32),
        "–ê–≤–≥—É—Å—Ç": range(1, 32),
        "–°–µ–Ω—Ç—è–±—Ä—å": range(1, 31),
        "–û–∫—Ç—è–±—Ä—å": range(1, 32),
        "–ù–æ—è–±—Ä—å": range(1, 31),
        "–î–µ–∫–∞–±—Ä—å": range(1, 32)
    }


    last_day = calendar.monthrange(year, page_number)[1]

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ  –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
    weekday_number = calendar.weekday(year, page_number, 1)
    weekday_of_last_day = calendar.weekday(year, page_number, last_day)

    title_button = InlineKeyboardButton(f"{current_month} {year}", callback_data="title")
    prev_button = InlineKeyboardButton("‚óÄÔ∏è", callback_data="prev")
    next_button = InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="next")
    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    empty_button1 = InlineKeyboardButton("", callback_data="empty_button1")
    empty_button2 = InlineKeyboardButton("", callback_data="empty_button2")
    empty_button3 = InlineKeyboardButton("", callback_data="empty_button3")
    week_monday = InlineKeyboardButton("–ü–æ–Ω", callback_data="title")
    week_tuesday = InlineKeyboardButton("–í—Ç", callback_data="title")
    week_wednesday = InlineKeyboardButton("–°—Ä", callback_data="title")
    week_thursday = InlineKeyboardButton("–ß—Ç", callback_data="title")
    week_friday = InlineKeyboardButton("–ü—Ç", callback_data="title")
    week_saturday = InlineKeyboardButton("–°–±", callback_data="title")
    week_sunday = InlineKeyboardButton("–í—Å", callback_data="title")


    keyboards = InlineKeyboardMarkup(row_width=7)

    keyboards.add(title_button)
    keyboards.row(empty_button1, empty_button2, empty_button3, empty_button1, empty_button2, empty_button3, empty_button1)

    keyboards.row(week_monday, week_tuesday, week_wednesday, week_thursday, week_friday, week_saturday, week_sunday)
    # keyboards.row(empty_button1, empty_button2, empty_button3, empty_button1, empty_button2, empty_button3, empty_button1)

    while weekday_number != 0:
        weekday_number -= 1
        button = InlineKeyboardButton(text=" ", callback_data="title")
        keyboards.insert(button)


    for i in days_in_month[current_month]:
        if i >= len(days_in_month[current_month]) + 1:
            break
        a = i
        b = page_number
        if i < 10: a = f"0{i}"
        if int(page_number) < 10: b = f"0{page_number}"
        button = InlineKeyboardButton(text=f"{i}", callback_data=f"{a}.{b}.{year}")
        keyboards.insert(button)


    while weekday_of_last_day != 6:
        weekday_of_last_day += 1
        button = InlineKeyboardButton(text=" ", callback_data="title")
        keyboards.insert(button)
    keyboards.row(prev_button, cancel_button, next_button)
    result.extend((keyboards, counter, limiter))

    return result





def GenerationOfInlineButtons_time(typeOfTime:str="hours", time_hours:str="0"):
    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    empty_button1 = InlineKeyboardButton("", callback_data="empty_button1")
    keyboards = InlineKeyboardMarkup(row_width=4)


    if typeOfTime == "hours":
        _extracted_from_GenerationOfInlineButtons_time_(
            "–ß–∞—Å—ã", keyboards, empty_button1
        )
        hours = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]

        for i in hours:
            if i >= len(hours):
                break
            button = InlineKeyboardButton(text=f"{i}", callback_data=f"{i}")
            keyboards.insert(button)

    elif typeOfTime == "minutes":
        _extracted_from_GenerationOfInlineButtons_time_(
            "–ú–∏–Ω—É—Ç—ã", keyboards, empty_button1
        )
        minutes = ["00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55"]

        for i in minutes:
            # if int(i) >= len(minutes):
            #     break
            button = InlineKeyboardButton(text=f"{time_hours}:{i}", callback_data=f"{time_hours}:{i}")
            keyboards.insert(button)

    keyboards.row(empty_button1, empty_button1)
    keyboards.row(cancel_button)

    return keyboards


# TODO Rename this here and in `GenerationOfInlineButtons_time`
def _extracted_from_GenerationOfInlineButtons_time_(arg0, keyboards, empty_button1):
    title_button = InlineKeyboardButton(arg0, callback_data="title")
    keyboards.add(title_button)
    keyboards.row(empty_button1, empty_button1)


class SimpleKeyboardsForReplenishBalance:
    confirm_button = InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirmation_of_replenishment_of_the_balance')
    cancel_button = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='canceling_of_replenishment_of_the_balance')
    confirm_cancel_inline_kb = InlineKeyboardMarkup()
    confirm_cancel_inline_kb.insert(confirm_button).insert(cancel_button)

    # - - - top up with a certain amount
    top_up_amounts = [100.0, 200.0, 300.0, 500.0] # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –≤ —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    top_up_menu = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1)

    for amount in top_up_amounts:
        button = InlineKeyboardButton(text=f"{amount} ‚ÇΩ", callback_data=f'top_up_rubles_{int(amount)}')
        top_up_menu.insert(button)


# - - - - - - - - - - - - -- - - - - - - --
def direction_keyboard():
    inline_kb = InlineKeyboardMarkup(row_width=2)
    direction1 = InlineKeyboardButton("–í–æ–µ–Ω–≤–µ–¥ - –¶–µ–Ω—Ç—Ä", callback_data="voenC")
    direction2 = InlineKeyboardButton("–°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π - –¶–µ–Ω—Ç—Ä", callback_data="suvC")
    direction3 = InlineKeyboardButton("–°–µ–≤–µ—Ä–Ω—ã–π - –¶–µ–Ω—Ç—Ä", callback_data="sevC")
    direction4 = InlineKeyboardButton("–°–µ–ª—å–º–∞—à - –¶–µ–Ω—Ç—Ä", callback_data="selC")
    direction5 = InlineKeyboardButton("–ó–∞–ø–∞–¥–Ω—ã–π - –¶–µ–Ω—Ç—Ä", callback_data="zapC")
    direction6 = InlineKeyboardButton("–¶–µ–Ω—Ç—Ä - –í–æ–µ–Ω–≤–µ–¥", callback_data="cVoen")
    direction7 = InlineKeyboardButton("–¶–µ–Ω—Ç—Ä - –°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π", callback_data="cSuv")
    direction8 = InlineKeyboardButton("–¶–µ–Ω—Ç—Ä - –°–µ–≤–µ—Ä–Ω—ã–π", callback_data="cSev")
    direction9 = InlineKeyboardButton("–¶–µ–Ω—Ç—Ä - –°–µ–ª—å–º–∞—à", callback_data="cSel")
    direction10 = InlineKeyboardButton("–¶–µ–Ω—Ç—Ä - –ó–∞–ø–∞–¥–Ω—ã–π", callback_data="cZap")

    inline_kb.add(direction1, direction6, direction2, direction7, direction3, direction8, direction4,
                  direction9, direction5, direction10)

    return inline_kb


def route_keyboard(direction):
    inline_kb = InlineKeyboardMarkup(row_width=2)

    if (direction == "voenC"):
        route1 = InlineKeyboardButton('1', callback_data='voenCMarshrut1')
        route2 = InlineKeyboardButton('2', callback_data='voenCMarshrut2')
        inline_kb.add(route1, route2)
    if (direction == "suvC"):
        route1 = InlineKeyboardButton('1', callback_data='suvCMarshrut1')
        route2 = InlineKeyboardButton('2', callback_data='suvCMarshrut2')
        inline_kb.add(route1, route2)
    if (direction == "sevC"):
        route1 = InlineKeyboardButton('1', callback_data='sevCMarshrut1')
        route2 = InlineKeyboardButton('2', callback_data='sevCMarshrut2')
        inline_kb.add(route1, route2)
    if (direction == "selC"):
        route1 = InlineKeyboardButton('1', callback_data='selCMarshrut1')
        route2 = InlineKeyboardButton('2', callback_data='selCMarshrut2')
        route3 = InlineKeyboardButton('3', callback_data='selCMarshrut3')
        inline_kb.add(route1, route2, route3)
    if (direction == "zapC"):
        route1 = InlineKeyboardButton('1', callback_data='zapCMarshrut1')
        route2 = InlineKeyboardButton('2', callback_data='zapCMarshrut2')
        inline_kb.add(route1, route2)
    if (direction == "cVoen"):
        route1 = InlineKeyboardButton('1', callback_data='cVoenMarshrut1')
        route2 = InlineKeyboardButton('2', callback_data='cVoenMarshrut2')
        inline_kb.add(route1, route2)
    if (direction == "cSuv"):
        route1 = InlineKeyboardButton('1', callback_data='cSuvMarshrut1')
        route2 = InlineKeyboardButton('2', callback_data='cSuvMarshrut2')
        inline_kb.add(route1, route2)
    if (direction == "cSev"):
        route1 = InlineKeyboardButton('1', callback_data='cSevMarshrut1')
        route2 = InlineKeyboardButton('2', callback_data='cSevMarshrut2')
        inline_kb.add(route1, route2)
    if (direction == "cSel"):
        route1 = InlineKeyboardButton('1', callback_data='cSelMarshrut1')
        route2 = InlineKeyboardButton('2', callback_data='cSelMarshrut2')
        route3 = InlineKeyboardButton('3', callback_data='cSelMarshrut3')
        inline_kb.add(route1, route2, route3)
    if (direction == "cZap"):
        route1 = InlineKeyboardButton('1', callback_data='cZapMarshrut1')
        route2 = InlineKeyboardButton('2', callback_data='cZapMarshrut2')
        inline_kb.add(route1, route2)
    return inline_kb


def create_keyboard_for_choose_points(direction, route):
    route_number = extract_number(route)
    number_of_points = DirectionRoutesPoints.get_number_of_points_by_direction_and_route(direction, route_number)
    keyboard_list = []
    for i in range(number_of_points):
        point_text = DirectionRoutesPoints.get_point_by_direction_and_route(direction, route_number, i)
        button = InlineKeyboardButton(point_text, callback_data=i)
        keyboard_list.append(button)
    return keyboard_list

def all_dots_kb(route):
    direction_mapping = {
        'voenCMarshrut1': '–í–æ–µ–Ω–≤–µ–¥ - –¶–µ–Ω—Ç—Ä',
        'voenCMarshrut2': '–í–æ–µ–Ω–≤–µ–¥ - –¶–µ–Ω—Ç—Ä',
        'suvCMarshrut1': '–°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π - –¶–µ–Ω—Ç—Ä',
        'suvCMarshrut2': '–°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π - –¶–µ–Ω—Ç—Ä',
        'sevCMarshrut1': '–°–µ–≤–µ—Ä–Ω—ã–π - –¶–µ–Ω—Ç—Ä',
        'sevCMarshrut2': '–°–µ–≤–µ—Ä–Ω—ã–π - –¶–µ–Ω—Ç—Ä',
        'selCMarshrut1': '–°–µ–ª—å–º–∞—à - –¶–µ–Ω—Ç—Ä',
        'selCMarshrut2': '–°–µ–ª—å–º–∞—à - –¶–µ–Ω—Ç—Ä',
        'selCMarshrut3': '–°–µ–ª—å–º–∞—à - –¶–µ–Ω—Ç—Ä',
        'zapCMarshrut1': '–ó–∞–ø–∞–¥–Ω—ã–π - –¶–µ–Ω—Ç—Ä',
        'zapCMarshrut2': '–ó–∞–ø–∞–¥–Ω—ã–π - –¶–µ–Ω—Ç—Ä',
        'cVoenMarshrut1': '–¶–µ–Ω—Ç—Ä - –í–æ–µ–Ω–≤–µ–¥',
        'cVoenMarshrut2': '–¶–µ–Ω—Ç—Ä - –í–æ–µ–Ω–≤–µ–¥',
        'cSuvMarshrut1': '–¶–µ–Ω—Ç—Ä - –°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π',
        'cSuvMarshrut2': '–¶–µ–Ω—Ç—Ä - –°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π',
        'cSevMarshrut1': '–¶–µ–Ω—Ç—Ä - –°–µ–≤–µ—Ä–Ω—ã–π',
        'cSevMarshrut2': '–¶–µ–Ω—Ç—Ä - –°–µ–≤–µ—Ä–Ω—ã–π',
        'cSelMarshrut1': '–¶–µ–Ω—Ç—Ä - –°–µ–ª—å–º–∞—à',
        'cSelMarshrut2': '–¶–µ–Ω—Ç—Ä - –°–µ–ª—å–º–∞—à',
        'cSelMarshrut3': '–¶–µ–Ω—Ç—Ä - –°–µ–ª—å–º–∞—à',
        'cZapMarshrut1': '–¶–µ–Ω—Ç—Ä - –ó–∞–ø–∞–¥–Ω—ã–π',
        'cZapMarshrut2': '–¶–µ–Ω—Ç—Ä - –ó–∞–ø–∞–¥–Ω—ã–π'
    }

    direction = direction_mapping.get(route)
    if not direction:
        return None

    inline_kb = InlineKeyboardMarkup(row_width=1)
    for button in create_keyboard_for_choose_points(direction, route):
        inline_kb.add(button)

    return inline_kb


def point_A_keyboard(route):
    inline_kb = all_dots_kb(route=route)
    all_buttons = sum(inline_kb.inline_keyboard, [])[:-1]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    new_keyboard = InlineKeyboardMarkup(row_width=inline_kb.row_width)
    new_keyboard.inline_keyboard = [all_buttons[i:i + new_keyboard.row_width] for i in
                                    range(0, len(all_buttons), new_keyboard.row_width)]
    return new_keyboard


def point_B_keyboard(route, pointA):
    inline_kb = all_dots_kb(route=route)
    all_buttons = sum(inline_kb.inline_keyboard, [])

    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ n –∫–Ω–æ–ø–æ–∫
    remaining_buttons = all_buttons[pointA:] if pointA <= len(all_buttons) else []

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    new_keyboard = InlineKeyboardMarkup(row_width=inline_kb.row_width)
    new_keyboard.inline_keyboard = [remaining_buttons[i:i + new_keyboard.row_width] for i in
                                    range(0, len(remaining_buttons), new_keyboard.row_width)]
    return new_keyboard


def get_payment_keyboard():
    pay_button = InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")
    keyboard14 = InlineKeyboardMarkup().add(pay_button)
    return keyboard14